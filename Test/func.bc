scale = 0

/* TEST 1: pure function */
define square(x){
   return x * x
}

square(2)           # 4
square(-2)          # 4
square(25)          # 625
square(square(7))   # 2401



/* TEST 2: function with global and local variable
           sum in global scope and i, n in local scope */
sum = 0

define sumupto(n){
    for(i = 1; i <= n; ++i){
        sum += i
    }
}

sumupto(4)            # 0

/* variable value after function call,
   default value is zero if var not in scope */
sum                   # 10
i                     # 0
n                     # 0




/* TEST 3: recursive fibonacci function */
define fib(n){
    if(n == 0 || n == 1){
        return n;
    }
    return fib(n - 1) + fib(n - 2);
}

fib(0)  # 0
fib(1)  # 1
fib(2)  # 1
fib(3)  # 2
fib(4)  # 3
fib(5)  # 5
fib(10) # 55



/* TEST 4: recursive factorial function */
define fact(n){

    if(n == 0){
        return 1;
    }

    return n * fact(n - 1);
}

fact(0) # 1
fact(1) # 1
fact(2) # 2
fact(3) # 6
fact(4) # 24




/* TEST 5: nested function call */

define mulupto(n){

    result = 1;

    for(k = 2; k <= n; ++k){
        result *= k;
    }

    return result
}

define foo(n){

    for(j = 1; j <= n; ++j){
        mulupto(j)
    }

    return
}

foo(4)

# 1
# 2
# 6
# 24
# 0


/* TEST 6 : mixing scope, dynamic function definition */
a = 4
b = 0

a
b

define foo(arg){
    while(a >= b){
        print arg
        a = a - 1
        b = b + 1
    }
}


foo(1)
a
b

# 4
# 0
# 1
# 1
# 1
# 0
# 1
# 3

/* TEST 7 : recursive, arguments are in local scope even if */

define gcd(a, b){
    if(b == 0){
        return a;
    }
    return gcd(b, a % b);
}

gcd(a,b)
a = 25
b = 5
gcd(b,a)
a
b

# 1
# 5
# 25
# 5